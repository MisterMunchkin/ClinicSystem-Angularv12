rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    match /{document=**} {
      allow read, write: if false;
    }
    //get request with user document
    match /users/{email} {
    	//Allows users to read their own profile if they're signed in
    	allow get: if isSignedIn() && belongsTo(email)
      allow list: if isSignedIn() && isAdmin();

      //allows users to create user object as long as they are signed in,
      //it is their uid, and it is not an isAdmin and isDoctor request
      allow create: if isSignedIn()

      //only allows admins to delete users and update users
      //or if it is their document
      allow delete, update: if isSignedIn() && (isAdmin() || belongsTo(email));
    }

    //Only Doctors are allowed to read and write to patients
    match /patients/{patient} {
    	allow read: if isSignedIn() && isDoctor()
      allow write: if isSignedIn() && isDoctor()
    }

    function isSignedIn() {
      return request.auth != null;
    }

    //checks if user that is making the request is an admin
    function isAdmin() {
      return ("isAdmin" in get(/databases/$(database)/documents/users/$(request.auth.token.email)).data) &&
      get(/databases/$(database)/documents/users/$(request.auth.token.email)).data.isAdmin == true;
    }
    //checks if user that is making the request is a doctor
    function isDoctor() {
      return ("isDoctor" in get(/databases/$(database)/documents/users/$(request.auth.token.email)).data) &&
      get(/databases/$(database)/documents/users/$(request.auth.token.email)).data.isDoctor == true;
    }
    function belongsTo(email) {
    	return request.auth.token.email == email
		}

    //these functions checks if the request data has isAdmin or isDoctor properties.
  //  function isAdminRequest(rsc) {
  //  	return ("isAdmin" in rsc.data);
  //  }
  //  function isDoctorRequest(rsc) {
  //  return ("isDoctor" in rsc.data);
  //  }
  }
}
